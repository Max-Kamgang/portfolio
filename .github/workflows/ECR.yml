# This is a basic workflow to help you get started with Actions

name: CI


on:
  
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
jobs:

  build:
    
    runs-on: ubuntu-latest


    steps:
    
      - uses: actions/checkout@v4

      # Add this step to configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Add this step to login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # The "Build Image" step is updated to tag with the ECR URI
      - name: Build Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: site/utc-app
          IMAGE_TAG: ${{ github.run_number }}
        run: | 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          
      
      # The "Push Image" step is updated to push to ECR
      # This is crucial as ECR scan happens AFTER push.
      - name: Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: site/utc-app
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY

  # New job for AWS ECR Image Scanning
  ecr_scan:
    needs: build # This job depends on the 'build' job completing successfully
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for ECR scan job
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for ECR Image Scan to Complete and Check Findings
        env:
          ECR_REPOSITORY: site/utc-app
          IMAGE_TAG: ${{ github.run_number }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ATTEMPTS=0
          MAX_ATTEMPTS=30 # Wait up to 5 minutes (30 * 10 seconds)
          SCAN_STATUS=""

          echo "Waiting for ECR scan for image $ECR_REPOSITORY:$IMAGE_TAG to complete..."

          while [ "$SCAN_STATUS" != "COMPLETE" ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            SCAN_STATUS=$(aws ecr describe-image-scans \
              --repository-name $ECR_REPOSITORY \
              --image-id imageTag=$IMAGE_TAG \
              --query 'imageScanStatuses[0].status' \
              --output text)
            
            if [ "$SCAN_STATUS" == "COMPLETE" ]; then
              echo "ECR scan complete."
              break
            elif [ "$SCAN_STATUS" == "FAILED" ]; then
              echo "ERROR: ECR scan failed!"
              exit 1
            else
              echo "Scan status: $SCAN_STATUS. Waiting 10 seconds..."
              sleep 10
              ATTEMPTS=$((ATTEMPTS+1))
            fi
          done

          if [ "$SCAN_STATUS" != "COMPLETE" ]; then
            echo "ERROR: ECR scan did not complete within the allotted time."
            exit 1
          fi

          echo "Checking scan findings..."
          # Get scan findings and filter for HIGH or CRITICAL vulnerabilities
          FINDINGS=$(aws ecr describe-image-scan-findings \
            --repository-name $ECR_REPOSITORY \
            --image-id imageTag=$IMAGE_TAG \
            --query 'imageScanFindings.findings[?severity==`HIGH` || severity==`CRITICAL`]' \
            --output json)
          
          # Check if any high or critical findings were returned
          if [ "$(echo "$FINDINGS" | jq 'length')" -gt 0 ]; then
            echo "--------------------------------------------------------"
            echo "CRITICAL OR HIGH SEVERITY VULNERABILITIES FOUND IN ECR SCAN:"
            echo "$FINDINGS" | jq .
            echo "--------------------------------------------------------"
            echo "Failing pipeline due to critical/high vulnerabilities."
            exit 1
          else
            echo "No HIGH or CRITICAL vulnerabilities found by ECR scan."
          fi
    
  deploy:
    needs: ecr_scan # This job now depends on the 'ecr_scan' job completing successfully
    runs-on: ubuntu-latest
    steps:
      - name: SSH to the server
        uses: appleboy/ssh-action@v1
        with:
          host:    ${{secrets.HOST}}
          username: ${{secrets.USERNAME_SSH}}
          key:     ${{secrets.KEY}}
          #port:    ${{secrets.PORT}}
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 639794896634.dkr.ecr.us-east-1.amazonaws.com
            docker pull 639794896634.dkr.ecr.us-east-1.amazonaws.com/site/utc-app:${{ github.run_number }}
            docker rm -f resume
            docker run -d --name resume -p 8080:5001 639794896634.dkr.ecr.us-east-1.amazonaws.com/site/utc-app:${{ github.run_number }}